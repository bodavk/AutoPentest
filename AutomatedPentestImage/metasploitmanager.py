from pymetasploit3.msfrpc import MsfRpcClient
import subprocess
import time
from auxiliarymanager import AuxiliaryManager
from exploitmanager import ExploitManager
from msfreportmanager import MsfReportManager
from msfwrapper import MsfWrapper
class MetasploitManager(object):
    def set_targets(self, targets_report_file_name):
        """
        Sets up the environment so that the msf can be used properly.
        """
        #TODO mount the volume on autopentest docker image and run this script in there
        #self._start_and_initialize_required_services()
        self.client_console = MsfWrapper(targets_report_file_name)
        
        pass

    def exploit(self, output_report_filename):

        detected_services = self._get_services(self.client_console)

        #auxiliary_manager = AuxiliaryManager(self.client_console, detected_services, output_report_filename)
        #auxiliary_manager.run_scans()

        exploit_manager = ExploitManager(self.client_console, output_report_filename, detected_services)
        exploit_manager.run_exploits()

        pass

    def _start_and_initialize_required_services(self):
        """
        Starts postgress service if it wasn't started already on host,
        initializes msfdb and starts msfrpcd on the host
        """
        try:
            subprocess.run(["service", "postgresql", "start"])
            subprocess.run(["msfdb", "init"])
            subprocess.run(["msfrpcd", "-P", "supersecret", "-S"])
        except Exception as identifier:
            print(identifier)

    def _get_services(self, client_console):       
        console_response = self._get_console_services(client_console)
        return self._parse_services_response(console_response)
        
    def _get_console_services(self,client_console):
        command = "services -R"
        response = client_console.get_command_response(command)
        print(response)
        return response

    def _parse_services_response(self, console_response):
        services = {}
        rows = console_response.splitlines()
        for row in rows[5:]:
            if ('RHOSTS' not in row and row != ''):
                collumns = row.split()
                name = collumns[3]
                if (name != '' and name not in services):
                    if (len(collumns) >= 6):
                        service_information = ' '.join(str(x) for x in collumns[5:]) 
                        services[name] = service_information 
                    else:
                        services[name] = ''
        return services
                   
# TODO Additional information gathering to be implemented:
# SNMP maybe https://www.offensive-security.com/metasploit-unleashed/snmp-scan/
# WMAP maybe https://www.offensive-security.com/metasploit-unleashed/wmap-web-scanner/
# NeXPose maybe https://www.offensive-security.com/metasploit-unleashed/nexpose-msfconsole/
# https://www.offensive-security.com/metasploit-unleashed/working-with-nexpose/ 
# *the link above shows how to start the scan and use it to create xml report, import into msf
# and use in addition to msf vulns 
# Nessus maybe https://www.offensive-security.com/metasploit-unleashed/nessus-via-msfconsole/
# https://www.offensive-security.com/metasploit-unleashed/working-with-nessus/
#* the link above shows how to import nessus scan reports
