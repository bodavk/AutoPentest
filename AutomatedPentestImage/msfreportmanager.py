import json 
class MsfReportManager(object):
    def __init__(self, output_report_filename):
        self.output_report_filename = output_report_filename
        self._initialize_report_file()
        self.output_dictionary = {}

    def _initialize_report_file(self):
        """
        Overwrites an old report file with a new empty one (due to the fact that the write_to_report appends)
        """

        with open(self.output_report_filename, "w") as output_file:
            output_file.write("")

    def add_to_report(self, module, response):
        """
        Adds a response to the report format
        """

        self.report = ""
        if (response != ""):
            self.report += "MODULE USED> "+module+"\n"
            self.report += "Begin response\n\n"
            self.report += response
            self.report += "End response \n\n"   
            self.output_dictionary[module] = response

        print("\n[+] Module "+module+" done with execution. Results added to the report.\n")

        self._write_to_report()

    def _write_to_report(self):
        """
        Writes an output based on success of exploatation phase of the penetration test
        """
        if (self.report != ''):
            with open(self.output_report_filename, "a") as output_file:
                output_file.write(self.report)
            print("\n[+] MSF action report was written to the: " + self.output_report_filename)
        else:
            print("\n[*] Nothing from this action was added to the report file")
    
    def output_json_report(self):
        if (self.output_dictionary is not None):
            with open(self.output_report_filename + "_json", 'w') as fp:
                json.dump(self.output_dictionary, fp, sort_keys = True,)