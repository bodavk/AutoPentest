from scanner import Scanner
from nmapanalyser import NmapResultAnalyser
from metasploitmanager import MetasploitManager
from reportgenerator import ReportGenerator
from asciidrawer import AsciiArtPrinter

def get_target():
    #TODO change with address from args
    # if the target wasn't specified by args, ask for it
    return "192.168.200.129"

def scan_target(target, output_scan_report_filename):
    output_decorated("Scanning ... Please wait")
    scanner = Scanner()
    scan_result = scanner.Scan(target, output_scan_report_filename) #TODO uncomment
    #scan_result = output_scan_report_filename 
    output_decorated("Scan done")
    return scan_result

def analyse(input_scan_results_filename, output_report_filename):
    print("Analysing scan results... Please wait")
    analyser = NmapResultAnalyser()   
    analysis_report_filename = analyser.analyse_scan_results(input_scan_results_filename, output_report_filename)
    print("Analysis done, proceeding with the exploit phase")

def exploit(scan_report_path, output_report_filename):
    print("Further information gathering and exploatation phase has begun")
    msf = MetasploitManager()
    msf.set_targets(scan_report_path)
    msf.exploit(output_report_filename)
    #TODO add other tools such as Nikto web scanner and sqlmap
    #msf.generate_report()
    print("Exploiting phase is over, final report {0} shows both failed and successful attemtps".format(output_report_filename))

def draw_ascii_banner():
    printer = AsciiArtPrinter()
    printer.draw_ascii_banner_random_font("AutoPentest")

def output_decorated(message):
    delimiter = "-"*len(message)
    print(message)
    print(delimiter)


if __name__ == "__main__":
    draw_ascii_banner()

    target = get_target()

    scan_report_name = scan_target(target,"nmap_report.xml") #TODO add target to the filename
 
    analyse(scan_report_name, "searchsploit_report")

    exploit(scan_report_name, "msf_report.txt")

