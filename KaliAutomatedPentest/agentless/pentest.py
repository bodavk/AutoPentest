from scanner import Scanner
from nmapanalyser import NmapResultAnalyser
from metasploitmanager import MetasploitManager
from reportgenerator import ReportGenerator

def get_target():
    #TODO change with address from args
    return "scanme.nmap.org"

def scan_target(target):
    scanner = Scanner()
    #scan_result = scanner.Scan(target)
    #print(scan_result)
    scan_result = """host;hostname;hostname_type;protocol;port;name;state;product;extrainfo;reason;version;conf;cpe\r\n45.33.32.156;scanme.nmap.org;user;tcp;17;qotd;filtered;;;no-response;;3;\r\n45.33.32.156;scanme.nmap.org;PTR;tcp;17;qotd;filtered;;;no-response;;3;\r\n45.33.32.156;scanme.nmap.org;user;tcp;22;ssh;open;OpenSSH;"Ubuntu Linux; protocol 2.0";syn-ack;6.6.1p1 Ubuntu 2ubuntu2.11;10;cpe:/o:linux:linux_kernel\r\n45.33.32.156;scanme.nmap.org;PTR;tcp;22;ssh;open;OpenSSH;"Ubuntu Linux; protocol 2.0";syn-ack;6.6.1p1 Ubuntu 2ubuntu2.11;10;cpe:/o:linux:linux_kernel\r\n45.33.32.156;scanme.nmap.org;user;tcp;23;telnet;filtered;;;no-response;;3;\r\n45.33.32.156;scanme.nmap.org;PTR;tcp;23;telnet;filtered;;;no-response;;3;\r\n45.33.32.156;scanme.nmap.org;user;tcp;80;http;open;Apache httpd;(Ubuntu);syn-ack;2.4.7;10;cpe:/a:apache:http_server:2.4.7\r\n45.33.32.156;scanme.nmap.org;PTR;tcp;80;http;open;Apache httpd;(Ubuntu);syn-ack;2.4.7;10;cpe:/a:apache:http_server:2.4.7\r\n45.33.32.156;scanme.nmap.org;user;tcp;135;msrpc;filtered;;;no-response;;3;\r\n45.33.32.156;scanme.nmap.org;PTR;tcp;135;msrpc;filtered;;;no-response;;3;\r\n45.33.32.156;scanme.nmap.org;user;tcp;139;netbios-ssn;filtered;;;no-response;;3;\r\n45.33.32.156;scanme.nmap.org;PTR;tcp;139;netbios-ssn;filtered;;;no-response;;3;\r\n45.33.32.156;scanme.nmap.org;user;tcp;445;microsoft-ds;filtered;;;no-response;;3;\r\n45.33.32.156;scanme.nmap.org;PTR;tcp;445;microsoft-ds;filtered;;;no-response;;3;\r\n"""
    return scan_result

def analyse(scan_results):
    analyser = NmapResultAnalyser()   
    potential_entrypoints = analyser.analyse_scan_results(scan_result)
    return potential_entrypoints

def exploit(potential_entrypoints):
    msf = MetasploitManager()
    msf.set_targets(potential_entrypoints)
    msf.exploit()
    exploit_report = msf.generate_report()
    return exploit_report

def report(scan_result, exploit_report):
    report_generator = ReportGenerator()
    report_generator.set_scan_results(scan_result)
    report_generator.set_exploit_results(exploit_report)
    report_generator.generate_report()

if __name__ == "__main__":
    target = get_target()

    scan_result = scan_target(target)
 
    entrypoints = analyse(scan_result)

    exploits = exploit(entrypoints)

    report(scan_result, exploits)
