from pymetasploit3.msfrpc import MsfRpcClient
from msfreportmanager import MsfReportManager
class AuxiliaryScanner(object):
    def __init__(self, client_console, detected_services, output_filename):
        self.client_console = client_console
        self.services = detected_services

        list_modules_dcerpc = ['auxiliary/scanner/dcerpc/endpoint_mapper',
        'auxiliary/scanner/dcerpc/hidden',
        'auxiliary/scanner/dcerpc/tcp_dcerpc_auditor']

        list_modules_ftp = ['auxiliary/scanner/ftp/ftp_version',
        'auxiliary/scanner/ftp/anonymous',
        'auxiliary/scanner/ftp/ftp_login']

        list_modules_http = ['auxiliary/scanner/http/cert',
        'auxiliary/scanner/http/ssl',
        'auxiliary/scanner/http/http_version'
        'auxiliary/scanner/http/dir_listing',
        'auxiliary/scanner/http/dir_scanner',
        #'auxiliary/scanner/http/enum_wayback' -> check how to set up domain name for this
        'auxiliary/scanner/http/files_dir',
        'auxiliary/scanner/http/open_proxy',
        'auxiliary/scanner/http/options',
        'auxiliary/scanner/http/robots_txt'
        ]

        list_modules_imap = ['auxiliary/scanner/imap/imap_version']

        list_modules_mssql = ['auxiliary/scanner/mssql/mssql_ping',
        'auxiliary/admin/mssql/mssql_idf'
        ]

        list_modules_mysql = ['auxiliary/scanner/mysql/mysql_version',
        'auxiliary/scanner/mysql/mysql_login'      
        ]

        list_modules_netbios = ['auxiliary/scanner/netbios/nbname',
        'auxiliary/scanner/netbios/nbname_probe'
        ]

        list_modules_pop3 = ['auxiliary/scanner/pop3/pop3_version']

        list_modules_smb = ['auxiliary/scanner/smb/smb_version',
        'auxiliary/scanner/smb/pipe_auditor', 
        'auxiliary/scanner/smb/smb2',
        'auxiliary/scanner/smb/smb_enumusers',
        'auxiliary/scanner/smb/smb_enumshares',
        'auxiliary/scanner/smb/pipe_dcerpc_auditor',
        'auxiliary/scanner/smb/smb_lookupsid'
        ]

        list_modules_smtp = ['use auxiliary/scanner/smtp/smtp_enum',
        'auxiliary/scanner/smtp/smtp_version'
        ]

        list_modules_snmp = ['auxiliary/scanner/snmp/snmp_enum',
        'auxiliary/scanner/snmp/snmp_enumusers',
        'auxiliary/scanner/snmp/snmp_enumshares'
        ]

        list_modules_ssh = ['auxiliary/scanner/ssh/ssh_login']

        list_modules_telnet = ['auxiliary/scanner/telnet/telnet_version']

        list_modules_vmware = ['auxiliary/scanner/vmware/vmware_enum_users']

        list_modules_vnc = ['auxiliary/scanner/vnc/vnc_none_auth',
        'auxiliary/scanner/vnc/vnc_login']

        list_modules_tomcat = ['auxiliary/admin/http/tomcat_administration']

        self.modules_dictionary = {'dcerpc':list_modules_dcerpc, 
        'ftp':list_modules_ftp,
        'http':list_modules_http,
        'imap':list_modules_imap,
        'mssql':list_modules_mssql,
        'mysql':list_modules_mysql,
        'netbios':list_modules_netbios,
        'pop3':list_modules_pop3,
        'smb':list_modules_smb,
        'smtp':list_modules_smtp,
        'snmp':list_modules_snmp,
        'ssh':list_modules_ssh,
        'telnet':list_modules_telnet,
        'vmware':list_modules_vmware,
        'vnc':list_modules_vnc,
        'tomcat':list_modules_tomcat}

        self.msfreporter = MsfReportManager("auxiliary_"+output_filename)

    def run_scans(self):
        for service in self.services:     
            try:
                if (str.lower(service) == 'http' and 'tomcat' in str.lower(self.services[service])):
                    self._scan_with_modules(self.modules_dictionary['tomcat']) #TODO if rpcbind check with dcerpc, netbios-ssn
                elif ('netbios' in str.lower(service)):
                    self._scan_with_modules(self.modules_dictionary['netbios'])
                elif ('rpc' in str.lower(service)):
                    self._scan_with_modules(self.modules_dictionary['dcerpc'])
                else:
                    try:
                        self._scan_with_modules(self.modules_dictionary[service])
                    except (Exception, KeyError) as identifier:
                        print("[!] Couldn't find pre-defined auxiliary modules for {0}".format(identifier))
                        self.msfreporter.add_to_report("No module detected for "+str(identifier), "The service has been detected on target." +
                        "Autopentest doesn't currently support auxiliary scan for this protocol and thus it should be manually inspected!")
            except Exception as identifier:
                print("\n[!] Exception happened! Details:" + identifier) + "\n"
        pass

    def _scan_with_modules(self, module_list):
        for module in module_list:
            print("[*] Currently trying to run {0} module. Please wait untill it has finished with execution".format(module))
            if(self._check_module_usability(module,self.client_console)):
                response = self.client_console.get_command_response("exploit") 
                self.msfreporter.add_to_report(module, response)
        pass

    def _check_module_usability(self, module, client_console):
        module_options = self._get_module_options(module,client_console)
        if (module_options != ''):

            module_option_rows = module_options.splitlines()

            self._initialize_thread_settings(module_option_rows,client_console)
            self._initialize_pwd_file_settings(client_console, module)

            module_usable = self._all_required_settings_configured(module_option_rows)

            print("\n[?] Module {1} is usable and will be run(?): {0} ".format(str(module_usable), module))
            return module_usable

    def _get_module_options(self, module, client_console):
        module_options = client_console.get_command_response("use " + module)
        module_options = client_console.get_command_response("show options")
        print (module_options) 
        return module_options

    def _set_thread_number(self, client_console, thread_number):
        response = client_console.get_command_response("set THREADS " + str(thread_number))
        print(response)

    def _set_pwd_file(self, client_console, pwd_file_path):
        response = client_console.get_command_response("set PWD_FILE "+pwd_file_path)
        print(response)

    def _initialize_pwd_file_settings(self, client_console, module):
        if ('ssh' in str.lower(module)):
            self._set_pwd_file(client_console, '/usr/share/metasploit-framework/data/wordlists/root_userpass.txt')

    def _initialize_thread_settings(self, rows, client_console):
        for row in rows:
            if ('threads' in str.lower(row)): 
                thread_number = 25
                self._set_thread_number(client_console, thread_number)

    def _all_required_settings_configured(self, module_options):
        for row in module_options[5:]:
            if (row != '' and row not in module_options[:5]):
                words = row.split()
                if (len(words) > 3 and words[1] == "yes" and words[2]!= "yes"): 
                    return False 
                #If the row is split by spaces/tabs and current setting is empty yes will be on index 1 instead of 2
                #That means that a required setting is not set up and module can't be used
        return True     

