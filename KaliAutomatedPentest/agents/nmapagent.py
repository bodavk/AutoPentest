from spade.behaviour import OneShotBehaviour
from spade.agent import Agent
from spade.message import Message
from spade.template import Template
import nmap

class NmapScanning(OneShotBehaviour): 
    async def run(self):
        print("Nmap agent is running, targeting the {}".format(self.target))
        
        options = "-T4 -A -v" #intense scan option in zenmap, change these two settings as necessary 
        #TODO test will it work with script scan -sC
        ports = "1-1024"
        #result = self._scan_target(self.target, options, ports)

        #TODO remove dummy result
        result = "hey"
        print("scanning done, notifying the next agent")
        await self._notify_manager(result)
    
    #async def on_end(self):
    #    print("Nmap agent is done")
    #    await self.agent.stop()

    def set_scan_target(self, target_address):
        self.target = target_address

    def _scan_target(self, target_address, options, port_range):
        nm = nmap.PortScanner() #initialize the portscanner
        nm.scan(self.target, port_range)
        scan_result = nm.csv()
        return scan_result

    async def _notify_manager(self, message_content):
        message = Message()
        message.sender = "nmap@localhost"
        message.to = "manager@localhost"
        message.set_metadata("performative", "inform")
        message.set_metadata("ontology", "scan-results")
        message.body = message_content
        await self.send(message)  

class NmapAgent(Agent):
    async def setup(self):
        self.agent_behaviour = NmapScanning()
        self.agent_behaviour.set_scan_target(self.target)
        #self.message_template = self._setup_message_template()
        #self.add_behaviour(self.agent_behaviour, self.message_template)
        self.add_behaviour(self.agent_behaviour)
    
    def set_target(self, target_address):
        self.target = target_address

    """def _setup_message_template(self):
        message_template = Template()
        message_template.sender = "msf@localhost"
        message_template.to = "nmap@localhost"
        message_template.set_metadata("performative", "inform")
        message_template.set_metadata("ontology", "scan-results")
        return message_template"""