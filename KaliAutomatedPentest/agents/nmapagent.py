from spade.behaviour import OneShotBehaviour
from spade.agent import Agent
import nmap

class NmapScanning(OneShotBehaviour):
    async def on_start(self):
        print("Nmap agent started")
    
    async def run(self):
        print("agent is running, targeting the {}".format(self.target))
        
        options = "-T4 -A -v" #intense scan from zenmap, change these two settings as necessary
        ports = "1-1024"
        result = self.scan_target(self.target, options, ports)

        print("scanning done, notifying the next agent")
        #TODO send message to the other agents that the job is finsihed / send the results
    
    async def on_end(self):
        print("Nmap scanner agent is done")
        await self.agent.stop()

    def set_scan_target(self, target_address):
        self.target = target_address

    def scan_target(self, target_address, options, port_range):
        nm = nmap.PortScanner() #initialize the portscanner
        nm.scan(self.target, port_range)
        scan_result = nm.csv()
        print(scan_result)
        return scan_result

class NmapAgent(Agent):
    async def setup(self):
        self.agent_behaviour = NmapScanning()
        self.agent_behaviour.set_scan_target(self.target)
        self.add_behaviour(self.agent_behaviour)
    
    def set_target(self, target_address):
        self.target = target_address