from spade.behaviour import OneShotBehaviour
from spade.agent import Agent
from spade.template import Template
from spade.message import Message

class ExploitingBehaviour(OneShotBehaviour):
    async def run(self):
        print("Exploit agent running")
        self.received_message = await self._receive_messages()
        print ("MSF received scan result: {}".format(self.received_message))
        self.exploit_procedure = self._analyse_scan(self.received_message)
        await self._notify_manager(self.exploit_procedure)
    
    async def on_end(self):
        print("Exploit agent is done")
        await self.agent.stop()

    async def _receive_messages(self):
        message_content = ""
        self.msg = await self.receive(timeout=10)
        if (self.msg):
            message_content = self.msg.body
        return message_content

    def _analyse_scan(self, scan):
        #TODO analyse open ports with versions
        #TODO use msf api and exploit the system
        #This should return some kind of feedback wether the exploiting was successful,
        #ideally a shell access should be given to the user,
        #but for now a report on how it was done should be just fine
        return "procedure leading to the exploatation of the system according to the scan result"
    
    async def _notify_manager(self, message_content):
        message = Message()
        message.sender = "msf@localhost"
        message.to = "manager@localhost"
        message.set_metadata("performative", "inform")
        message.set_metadata("ontology", "exploit-results")
        message.body = message_content
        await self.send(message)

class MetasploitAgent(Agent):
    async def setup(self):
        self.agent_behaviour = ExploitingBehaviour()
        self.received_messages_template = self._setup_message_template()
        self.add_behaviour(self.agent_behaviour, self.received_messages_template)

    def _setup_message_template(self):
        message_template = Template()
        message_template.sender = "manager@localhost"
        message_template.to = "msf@localhost"
        message_template.set_metadata("performative", "inform")
        message_template.set_metadata("ontology", "scan-results")
        return message_template