from spade.behaviour import State
from spade.template import Template
from spade.message import Message

class TransitionState(State):
    async def run(self):
        print("Waiting for agents")
        #receive a message
        #check from whom is it
        #if nmap then send message to msf
            #next state = exploitstate
        #if msf then send message to reports
            #next state reports

    def _setup_message_template(self): #TODO this probalby has to go to the agentmanager.py to be set up when the agent is being created
        message_template = Template()
        message_template.sender = "msf@localhost | nmap@localhost" #TODO check if OR should be used like this mid-string
        message_template.to = "manager@localhost"
        message_template.set_metadata("performative", "inform")
        message_template.set_metadata("ontology", "scan-results")
        return message_template   

    async def _receive_messages(self):
        message_content = ""
        self.msg = await self.receive(timeout=10)
        if (self.msg):
            message_content = self.msg.body
        return message_content 

    #TODO from within one state messages can only be shared via manager@localhost
    #this means I have to implement a mechanism to exchange messages between nmapagent metasploitagent and reportingagent through the manager

    #TODO will probably need another state inbetween states which will wait until state is finished and will send a message to the next state 
    # and set it as the next